"""
Setup script ch·ªâ cho PostgreSQL v√† Qdrant - kh√¥ng c√≤n SQLite
"""
import os
import sys

# Th√™m root directory v√†o Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def setup_postgresql():
    """Thi·∫øt l·∫≠p v√† ki·ªÉm tra PostgreSQL connection"""
    print("üîß Setting up PostgreSQL connection...")
    
    try:
        from src.database.database import get_db_connection
        import sqlalchemy
        
        engine = get_db_connection()
        
        # Test connection
        with engine.connect() as conn:
            result = conn.execute(sqlalchemy.text("SELECT 1"))
            result.fetchone()
        
        # Li·ªát k√™ c√°c b·∫£ng c√≥ s·∫µn
        with engine.connect() as conn:
            result = conn.execute(sqlalchemy.text("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
                ORDER BY table_name
            """))
            tables = [row[0] for row in result.fetchall()]
            print(f"üìã Available PostgreSQL tables: {tables}")
        
        engine.dispose()
        print("‚úÖ PostgreSQL connection successful")
        return True
        
    except Exception as e:
        print(f"‚ùå Error connecting to PostgreSQL: {e}")
        print("üí° Make sure DATABASE_CONNECTION is set in .env file")
        return False

def setup_memory_system():
    """Thi·∫øt l·∫≠p memory system v·ªõi Qdrant"""
    print("\nüß† Setting up memory system...")
    
    try:
        # Ch·∫°y fix vector collection
        from fix_vector_collection import fix_vector_collection
        fix_vector_collection()
        print("‚úÖ Memory system ready")
        return True
    except Exception as e:
        print(f"‚ùå Error setting up memory system: {e}")
        return False

def setup_checkpointer():
    """Thi·∫øt l·∫≠p PostgreSQL checkpointer"""
    print("\nüîß Setting up PostgreSQL checkpointer...")
    
    try:
        from src.database.database import checkpointer
        if checkpointer:
            print("‚úÖ PostgreSQL checkpointer ready")
            return True
        else:
            print("‚ö†Ô∏è  PostgreSQL checkpointer not available")
            return False
    except Exception as e:
        print(f"‚ùå Error setting up checkpointer: {e}")
        return False

def run_setup():
    """Ch·∫°y to√†n b·ªô setup ch·ªâ v·ªõi PostgreSQL v√† Qdrant"""
    print("üöÄ Running PostgreSQL + Qdrant setup...")
    
    postgres_ok = setup_postgresql()
    memory_ok = setup_memory_system()  
    checkpointer_ok = setup_checkpointer()
    
    if postgres_ok and memory_ok:
        print("\n‚úÖ System setup completed successfully!")
        if not checkpointer_ok:
            print("‚ö†Ô∏è  Checkpointer setup c√≥ v·∫•n ƒë·ªÅ, nh∆∞ng system v·∫´n c√≥ th·ªÉ ho·∫°t ƒë·ªông")
        return True
    else:
        print("\n‚ùå System setup failed!")
        return False

if __name__ == "__main__":
    run_setup()
