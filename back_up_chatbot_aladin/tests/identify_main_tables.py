"""
Script x√°c ƒë·ªãnh b·∫£ng ch√≠nh trong travel2.sqlite database
"""
import os
import sqlite3
import requests
import pandas as pd
from typing import Dict, List, Tuple

def download_and_analyze():
    """T·∫£i v√† ph√¢n t√≠ch database ƒë·ªÉ x√°c ƒë·ªãnh b·∫£ng ch√≠nh"""
    
    # T·∫£i database
    url = "https://storage.googleapis.com/benchmarks-artifacts/travel-db/travel2.sqlite"
    local_file = "travel2_temp.sqlite"
    
    if not os.path.exists(local_file):
        print("üì• Downloading database...")
        response = requests.get(url)
        response.raise_for_status()
        with open(local_file, "wb") as f:
            f.write(response.content)
    
    conn = sqlite3.connect(local_file)
    
    try:
        # L·∫•y danh s√°ch b·∫£ng v√† s·ªë d√≤ng
        tables_query = "SELECT name FROM sqlite_master WHERE type='table';"
        tables = pd.read_sql(tables_query, conn)['name'].tolist()
        
        print("üóÉÔ∏è  PH√ÇN T√çCH B·∫¢NG CH√çNH")
        print("=" * 60)
        
        table_analysis = []
        
        for table in tables:
            # ƒê·∫øm s·ªë d√≤ng
            count_query = f"SELECT COUNT(*) as count FROM {table};"
            count = pd.read_sql(count_query, conn)['count'].iloc[0]
            
            # L·∫•y c·∫•u tr√∫c b·∫£ng
            schema_query = f"PRAGMA table_info({table});"
            schema = pd.read_sql(schema_query, conn)
            
            # T√¨m primary key
            pk_columns = schema[schema['pk'] == 1]['name'].tolist()
            
            # L·∫•y m·∫´u d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch
            if count > 0:
                sample_query = f"SELECT * FROM {table} LIMIT 3;"
                sample = pd.read_sql(sample_query, conn)
                columns = list(sample.columns)
            else:
                columns = schema['name'].tolist()
            
            table_analysis.append({
                'table': table,
                'row_count': count,
                'column_count': len(columns),
                'primary_keys': pk_columns,
                'columns': columns
            })
        
        # S·∫Øp x·∫øp theo s·ªë d√≤ng (quan tr·ªçng nh·∫•t)
        table_analysis.sort(key=lambda x: x['row_count'], reverse=True)
        
        print("\nüìä B·∫¢NG THEO S·ªê L∆Ø·ª¢NG D·ªÆ LI·ªÜU:")
        print("-" * 60)
        for i, table_info in enumerate(table_analysis, 1):
            importance = "ü•á CH√çNH" if i <= 3 else "ü•à PH·ª§" if i <= 6 else "ü•â KH√ÅC"
            print(f"{importance} {table_info['table']}: {table_info['row_count']:,} d√≤ng, {table_info['column_count']} c·ªôt")
            if table_info['primary_keys']:
                print(f"      üîë Primary Keys: {', '.join(table_info['primary_keys'])}")
        
        # Ph√¢n t√≠ch m·ªëi quan h·ªá
        print(f"\nüîó PH√ÇN T√çCH M·ªêI QUAN H·ªÜ:")
        print("-" * 60)
        
        main_tables = []
        transaction_tables = []
        lookup_tables = []
        
        for table_info in table_analysis:
            table = table_info['table']
            columns = table_info['columns']
            count = table_info['row_count']
            
            # Ph√¢n lo·∫°i d·ª±a tr√™n t√™n v√† c·∫•u tr√∫c
            if any(word in table.lower() for word in ['booking', 'reservation', 'order']):
                transaction_tables.append(table)
            elif any(word in table.lower() for word in ['flight', 'hotel', 'car', 'excursion']):
                if count > 100:  # B·∫£ng d·ªØ li·ªáu ch√≠nh
                    main_tables.append(table)
                else:  # B·∫£ng lookup
                    lookup_tables.append(table)
            elif count < 50:  # B·∫£ng lookup nh·ªè
                lookup_tables.append(table)
            else:
                main_tables.append(table)
        
        print("üè¢ B·∫¢NG D·ªÆ LI·ªÜU CH√çNH (Master Data):")
        for table in main_tables:
            info = next(t for t in table_analysis if t['table'] == table)
            print(f"   ‚Ä¢ {table}: {info['row_count']:,} d√≤ng - Ch·ª©a th√¥ng tin c∆° b·∫£n")
        
        print(f"\nüí≥ B·∫¢NG GIAO D·ªäCH (Transaction Data):")
        for table in transaction_tables:
            info = next(t for t in table_analysis if t['table'] == table)
            print(f"   ‚Ä¢ {table}: {info['row_count']:,} d√≤ng - Ch·ª©a giao d·ªãch/ƒë·∫∑t ch·ªó")
        
        print(f"\nüìö B·∫¢NG TRA C·ª®U (Lookup Tables):")
        for table in lookup_tables:
            info = next(t for t in table_analysis if t['table'] == table)
            print(f"   ‚Ä¢ {table}: {info['row_count']:,} d√≤ng - D·ªØ li·ªáu tham chi·∫øu")
        
        # K·∫øt lu·∫≠n
        print(f"\nüéØ K·∫æT LU·∫¨N:")
        print("=" * 60)
        most_important = table_analysis[0]['table']
        print(f"ü•á B·∫¢NG QUAN TR·ªåNG NH·∫§T: {most_important}")
        print(f"   ‚Üí {table_analysis[0]['row_count']:,} d√≤ng d·ªØ li·ªáu")
        print(f"   ‚Üí {table_analysis[0]['column_count']} c·ªôt")
        
        if transaction_tables:
            print(f"\nüíº B·∫¢NG GIAO D·ªäCH CH√çNH: {transaction_tables[0]}")
            trans_info = next(t for t in table_analysis if t['table'] == transaction_tables[0])
            print(f"   ‚Üí {trans_info['row_count']:,} giao d·ªãch")
        
        print(f"\nüìã TH·ª® T·ª∞ ∆ØU TI√äN MIGRATE:")
        priority_order = []
        
        # 1. B·∫£ng lookup tr∆∞·ªõc (ƒë·ªÉ t·∫°o foreign key)
        priority_order.extend(lookup_tables)
        # 2. B·∫£ng d·ªØ li·ªáu ch√≠nh
        priority_order.extend(main_tables)
        # 3. B·∫£ng giao d·ªãch cu·ªëi
        priority_order.extend(transaction_tables)
        
        for i, table in enumerate(priority_order, 1):
            info = next(t for t in table_analysis if t['table'] == table)
            print(f"   {i}. {table} ({info['row_count']:,} d√≤ng)")
        
        return table_analysis, priority_order
        
    finally:
        conn.close()
        if os.path.exists(local_file):
            os.remove(local_file)

if __name__ == "__main__":
    download_and_analyze()