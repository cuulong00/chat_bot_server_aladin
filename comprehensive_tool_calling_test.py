#!/usr/bin/env python3
"""
Comprehensive Tool Calling Test - Test both booking and preference detection tools
"""

import sys
sys.path.append('/Users/pro16/Documents/Code/Project/chatbot_aladdin/chat_bot_server_aladin')

def test_tool_calling_implementation():
    print("üî• COMPREHENSIVE TOOL CALLING TEST")
    print("=" * 60)
    
    # Test cases for both booking and preferences
    test_scenarios = {
        "üçΩÔ∏è BOOKING SCENARIOS": [
            {
                "input": "t√¥i mu·ªën ƒë·∫∑t b√†n 4 ng∆∞·ªùi l√∫c 7h t·ªëi nay",
                "expected_flow": "collect_info ‚Üí confirm ‚Üí book_table_reservation",
                "expected_tool": "book_table_reservation",
                "expected_route": "direct_answer",
                "category": "BOOKING_ACTION"
            },
            {
                "input": "ok ƒë·∫∑t b√†n v·ªõi th√¥ng tin ƒë√≥ ƒëi",
                "expected_flow": "confirm ‚Üí book_table_reservation", 
                "expected_tool": "book_table_reservation",
                "expected_route": "direct_answer",
                "category": "BOOKING_CONFIRMATION"
            }
        ],
        
        "üéØ PREFERENCE SCENARIOS": [
            {
                "input": "anh th√≠ch kh√¥ng gian y√™n tƒ©nh",
                "expected_flow": "detect_preference ‚Üí save_user_preference_with_refresh_flag",
                "expected_tool": "save_user_preference_with_refresh_flag", 
                "expected_route": "direct_answer",
                "category": "SEATING_PREFERENCE"
            },
            {
                "input": "t√¥i th√≠ch ƒÉn cay",
                "expected_flow": "detect_preference ‚Üí save_user_preference_with_refresh_flag",
                "expected_tool": "save_user_preference_with_refresh_flag",
                "expected_route": "direct_answer", 
                "category": "FOOD_PREFERENCE"
            },
            {
                "input": "em y√™u th√≠ch m√≥n l·∫©u",
                "expected_flow": "detect_preference ‚Üí save_user_preference_with_refresh_flag",
                "expected_tool": "save_user_preference_with_refresh_flag",
                "expected_route": "direct_answer",
                "category": "DISH_PREFERENCE"
            },
            {
                "input": "t√¥i th∆∞·ªùng ƒë·∫∑t b√†n 6 ng∆∞·ªùi",
                "expected_flow": "detect_habit ‚Üí save_user_preference_with_refresh_flag",
                "expected_tool": "save_user_preference_with_refresh_flag",
                "expected_route": "direct_answer",
                "category": "BOOKING_HABIT"
            }
        ],
        
        "‚ÑπÔ∏è INFORMATION SCENARIOS": [
            {
                "input": "menu m√≥n n√†o ngon nh·∫•t?",
                "expected_flow": "retrieve_documents ‚Üí generate_answer",
                "expected_tool": "None (RAG only)",
                "expected_route": "vectorstore",
                "category": "MENU_INQUIRY"
            },
            {
                "input": "gi·ªù m·ªü c·ª≠a l√† m·∫•y gi·ªù?",
                "expected_flow": "retrieve_documents ‚Üí generate_answer", 
                "expected_tool": "None (RAG only)",
                "expected_route": "vectorstore",
                "category": "BUSINESS_INFO"
            }
        ]
    }
    
    # Simulate routing for each scenario
    print("\nüß™ ROUTING & TOOL CALLING SIMULATION:")
    print("-" * 60)
    
    total_scenarios = 0
    correct_routes = 0
    correct_tools = 0
    
    for category, scenarios in test_scenarios.items():
        print(f"\n{category}")
        print("-" * 30)
        
        for i, scenario in enumerate(scenarios, 1):
            total_scenarios += 1
            
            print(f"\n{i}. Input: '{scenario['input']}'")
            print(f"   Category: {scenario['category']}")
            
            # Simulate router decision
            predicted_route = simulate_router(scenario['input'])
            route_correct = predicted_route == scenario['expected_route']
            
            print(f"   Expected Route: {scenario['expected_route']}")
            print(f"   Predicted Route: {predicted_route} {'‚úÖ' if route_correct else '‚ùå'}")
            
            if route_correct:
                correct_routes += 1
            
            # Check tool calling logic
            expected_tool = scenario['expected_tool']
            will_call_tool = predicted_route == "direct_answer" and expected_tool != "None (RAG only)"
            tool_correct = will_call_tool == (expected_tool != "None (RAG only)")
            
            print(f"   Expected Tool: {expected_tool}")
            print(f"   Will Call Tool: {will_call_tool} {'‚úÖ' if tool_correct else '‚ùå'}")
            
            if tool_correct:
                correct_tools += 1
                
            print(f"   Expected Flow: {scenario['expected_flow']}")
            
            # Overall status
            overall_status = "‚úÖ PASS" if (route_correct and tool_correct) else "‚ùå FAIL"
            print(f"   Status: {overall_status}")
    
    # Summary
    print("\n" + "=" * 60)
    print("üìä TEST RESULTS SUMMARY:")
    print(f"üéØ Routing Accuracy: {correct_routes}/{total_scenarios} ({correct_routes/total_scenarios*100:.1f}%)")
    print(f"üîß Tool Calling Accuracy: {correct_tools}/{total_scenarios} ({correct_tools/total_scenarios*100:.1f}%)")
    
    overall_accuracy = (correct_routes + correct_tools) / (total_scenarios * 2) * 100
    print(f"üéä Overall Accuracy: {overall_accuracy:.1f}%")
    
    # Specific focus on production issue
    print("\nüî• PRODUCTION ISSUE VERIFICATION:")
    production_case = "anh th√≠ch kh√¥ng gian y√™n tƒ©nh"
    production_route = simulate_router(production_case)
    
    print(f"Production Case: '{production_case}'")
    print(f"Route Decision: {production_route}")
    
    if production_route == "direct_answer":
        print("‚úÖ FIXED: Will now route to DirectAnswerAssistant")
        print("‚úÖ TOOL: save_user_preference_with_refresh_flag will be called")
        print("‚úÖ SUCCESS: Production issue resolved!")
    else:
        print("‚ùå STILL BROKEN: Routes to vectorstore")
        print("‚ùå NO TOOL: save_user_preference_with_refresh_flag won't be called")
        print("‚ùå PROBLEM: Production issue not fixed")

def simulate_router(message):
    """Simulate the fixed router logic"""
    message_lower = message.lower()
    
    # 1. Process document check (skip for text-only)
    
    # 2. DIRECT_ANSWER - Preferences (HIGHEST PRIORITY after process_document)
    preference_keywords = ['th√≠ch', 'y√™u th√≠ch', '∆∞a', 'kh√¥ng th√≠ch', 'gh√©t', 'mu·ªën', 'c·∫ßn', 'kh√¥ng mu·ªën']
    habit_keywords = ['th∆∞·ªùng', 'hay', 'lu√¥n']
    action_keywords = ['ƒë·∫∑t b√†n', 'x√°c nh·∫≠n ƒë·∫∑t', 'ok ƒë·∫∑t']
    greeting_keywords = ['xin ch√†o', 'c·∫£m ∆°n', 'ch√†o']
    
    if any(keyword in message_lower for keyword in preference_keywords):
        return "direct_answer"
    
    if any(keyword in message_lower for keyword in habit_keywords):
        return "direct_answer" 
    
    if any(keyword in message_lower for keyword in action_keywords):
        return "direct_answer"
    
    if any(keyword in message_lower for keyword in greeting_keywords):
        return "direct_answer"
    
    # 3. VECTORSTORE - Information queries
    info_keywords = ['menu', 'gi·ªù m·ªü c·ª≠a', 'ƒë·ªãa ch·ªâ', 'chi nh√°nh', 'hotline', 'gi√°', 'm√≥n', 'ngon', 'n√†o', 'm·∫•y gi·ªù', 'bao gi·ªù']
    
    if any(keyword in message_lower for keyword in info_keywords):
        return "vectorstore"
    
    # 4. Default to vectorstore
    return "vectorstore"

def check_assistant_prompts():
    """Check if assistant prompts have proper tool calling instructions"""
    print("\nüîç ASSISTANT PROMPTS ANALYSIS:")
    print("-" * 40)
    
    try:
        # Check generation assistant
        with open('src/graphs/core/assistants/generation_assistant.py', 'r', encoding='utf-8') as f:
            gen_content = f.read()
        
        # Check direct answer assistant  
        with open('src/graphs/core/assistants/direct_answer_assistant.py', 'r', encoding='utf-8') as f:
            direct_content = f.read()
        
        # Key tool calling elements
        tool_elements = [
            ("book_table_reservation", "Booking tool"),
            ("save_user_preference_with_refresh_flag", "Preference tool"),
            ("PH·∫¢I g·ªçi tool", "Must call tool instruction"),
            ("KH√îNG TH·ªÇ t·ª± tr·∫£ l·ªùi", "Cannot self-answer instruction"),
            ("tool call n√†y ph·∫£i HO√ÄN TO√ÄN V√î H√åNH", "Hidden tool call instruction")
        ]
        
        print("üìÑ GenerationAssistant Tool Elements:")
        for element, description in tool_elements:
            has_element = element in gen_content
            print(f"   {'‚úÖ' if has_element else '‚ùå'} {description}")
        
        print("\nüìÑ DirectAnswerAssistant Tool Elements:")
        for element, description in tool_elements:
            has_element = element in direct_content
            print(f"   {'‚úÖ' if has_element else '‚ùå'} {description}")
            
    except Exception as e:
        print(f"‚ùå Error reading assistant files: {e}")

if __name__ == "__main__":
    test_tool_calling_implementation()
    check_assistant_prompts()
