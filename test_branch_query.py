#!/usr/bin/env python3
"""Test script to check branch location queries in vector store."""

import sys
from pathlib import Path
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

PROJECT_ROOT = Path.cwd()
sys.path.insert(0, str(PROJECT_ROOT))

from src.database.qdrant_store import QdrantStore
from langchain_google_genai import GoogleGenerativeAIEmbeddings

def test_branch_queries():
    print('=== TEST QUERY: CHO ƒê·ªäA CH·ªà CHI TI·∫æT ·ªû VINCOM TH·∫¢O ƒêI·ªÄN ===')

    # Test c√°c query kh√°c nhau
    queries = [
        'cho anh ƒë·ªãa ch·ªâ chi ti·∫øt ·ªü vincom th·∫£o ƒëi·ªÅn',
        'vincom th·∫£o ƒëi·ªÅn ƒë·ªãa ch·ªâ', 
        'tian long vincom th·∫£o ƒëi·ªÅn',
        'chi nh√°nh th·∫£o ƒëi·ªÅn',
        'th√†nh ph·ªë h·ªì ch√≠ minh chi nh√°nh',
        'tian long c√≥ bao nhi√™u chi nh√°nh'
    ]

    try:
        # Initialize QdrantStore with model name string
        store = QdrantStore(
            collection_name='tianlong_marketing',
            embedding_model='text-embedding-004',
            output_dimensionality_query=768
        )
        
        for query in queries:
            print(f'\nüîç QUERY: "{query}"')
            print('=' * 60)
            
            results = store.search(namespace=None, query=query, limit=5)
            print(f'T√¨m ƒë∆∞·ª£c: {len(results)} k·∫øt qu·∫£')
            
            for i, (key, value, score) in enumerate(results):
                print(f'\n--- K·∫æT QU·∫¢ {i+1} ---')
                print(f'Score: {score:.4f}')
                print(f'Key: {key}')
                
                if isinstance(value, dict):
                    namespace = value.get('namespace', 'N/A')
                    category = value.get('category', 'N/A')
                    marketing_id = value.get('marketing_id', 'N/A')
                    print(f'Namespace: {namespace} | Category: {category} | ID: {marketing_id}')
                    
                    content = value.get('content', '')
                    if content:
                        # Highlight n·∫øu c√≥ th√¥ng tin Th·∫£o ƒêi·ªÅn
                        if 'th·∫£o ƒëi·ªÅn' in content.lower():
                            print(f'üéØ TH·∫¢O ƒêI·ªÄN MATCH!')
                            print(f'Full content:\n{content}')
                        elif 'h·ªì ch√≠ minh' in content.lower() or 'tp.hcm' in content.lower() or 'chi nh√°nh' in content.lower():
                            print(f'üèôÔ∏è RELEVANT CONTENT:')
                            print(f'{content}')
                        else:
                            print(f'Content: {content[:300]}...')
                    else:
                        print('Content: EMPTY')
                else:
                    print(f'Value: {value}')
                    
            print('\n' + '='*80)

    except Exception as e:
        print(f'‚ùå L·ªñI: {e}')
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_branch_queries()
