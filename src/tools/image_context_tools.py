"""
Image context tools for storing and retrieving image analysis results in vector database.
"""

import os
import logging
from typing import Dict, List, Any, Optional
from datetime import datetime
import google.generativeai as genai
from langchain_core.tools import tool
from langchain.text_splitter import RecursiveCharacterTextSplitter

from ..database.qdrant_store import QdrantStore

logger = logging.getLogger(__name__)

# Collection v√† namespace constants
IMAGE_CONTEXT_COLLECTION = "aladin_maketing"
IMAGE_CONTEXT_NAMESPACE_PREFIX = "image_context"

def get_image_context_namespace(user_id: str, thread_id: str) -> str:
    """Generate namespace for image context storage."""
    return f"{IMAGE_CONTEXT_NAMESPACE_PREFIX}_{user_id}_{thread_id}"

def get_qdrant_store() -> QdrantStore:
    """Get QdrantStore instance for image context."""
    return QdrantStore(
        collection_name=IMAGE_CONTEXT_COLLECTION,
        embedding_model="google-text-embedding-004"
    )

@tool
def save_image_context(
    user_id: str,
    thread_id: str,
    image_url: str,
    image_analysis: str,
    metadata: Optional[Dict[str, Any]] = None
) -> str:
    """
    Save image analysis context to vector database for later retrieval.
    
    Args:
        user_id: Facebook user ID
        thread_id: Facebook thread/conversation ID  
        image_url: URL of the analyzed image
        image_analysis: Detailed analysis text from LLM
        metadata: Additional metadata (optional)
        
    Returns:
        Success message with storage details
    """
    try:
        # T·∫°o namespace d·ª±a tr√™n user_id v√† thread_id
        namespace = get_image_context_namespace(user_id, thread_id)
        
        # Chu·∫©n b·ªã metadata
        context_metadata = {
            "user_id": user_id,
            "thread_id": thread_id,
            "image_url": image_url,
            "context_type": "image_analysis",
            "timestamp": datetime.now().isoformat(),
            "domain": "restaurant_context"
        }
        
        if metadata:
            context_metadata.update(metadata)
        
        # Split text th√†nh chunks n·∫øu qu√° d√†i
        splitter = RecursiveCharacterTextSplitter(
            chunk_size=800,
            chunk_overlap=200
        )
        chunks = splitter.split_text(image_analysis)
        
        # L∆∞u v√†o vector database
        qdrant_store = get_qdrant_store()
        
        for i, chunk in enumerate(chunks):
            # T·∫°o embedding cho chunk
            genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))
            result = genai.embed_content(
                model="models/text-embedding-004",
                content=chunk,
                task_type="SEMANTIC_SIMILARITY"
            )
            
            # L∆∞u v√†o Qdrant
            chunk_key = f"image_context_{user_id}_{thread_id}_{datetime.now().timestamp()}_{i}"
            qdrant_store.put(
                namespace=namespace,
                key=chunk_key,
                value={
                    "content": chunk,
                    "embedding": result["embedding"],
                    **context_metadata
                }
            )
        
        logger.info(f"‚úÖ Saved image context: {len(chunks)} chunks for user {user_id}, thread {thread_id}")
        return f"‚úÖ ƒê√£ l∆∞u th√¥ng tin ph√¢n t√≠ch h√¨nh ·∫£nh ({len(chunks)} ƒëo·∫°n) ƒë·ªÉ l√†m ng·ªØ c·∫£nh cho cu·ªôc h·ªôi tho·∫°i."
        
    except Exception as e:
        logger.error(f"‚ùå Error saving image context: {e}")
        return f"‚ùå L·ªói khi l∆∞u th√¥ng tin h√¨nh ·∫£nh: {str(e)}"

@tool  
def retrieve_image_context(
    user_id: str,
    thread_id: str,
    query: str,
    limit: int = 3
) -> str:
    """
    Retrieve relevant image context for answering user questions.
    
    Args:
        user_id: Facebook user ID
        thread_id: Facebook thread/conversation ID
        query: User's question/query
        limit: Maximum number of context chunks to retrieve
        
    Returns:
        Relevant image context information
    """
    try:
        print(f"--------------------------retrieve_image_context----------------------------")
        namespace = get_image_context_namespace(user_id, thread_id)
        qdrant_store = get_qdrant_store()
        
        # T√¨m ki·∫øm context li√™n quan
        results = qdrant_store.search(
            namespace=namespace,
            query=query,
            limit=limit
        )
        
        if not results:
            return "Kh√¥ng t√¨m th·∫•y th√¥ng tin h√¨nh ·∫£nh li√™n quan trong cu·ªôc h·ªôi tho·∫°i n√†y."
        
        # T·ªïng h·ª£p context
        context_parts = []
        for result in results:
            content = result.get("content", "")
            timestamp = result.get("timestamp", "")
            image_url = result.get("image_url", "")
            
            context_parts.append(f"[H√¨nh ·∫£nh t·ª´ {timestamp}]\n{content}")
        
        combined_context = "\n\n".join(context_parts)
        
        logger.info(f"üìÑ Retrieved {len(results)} image context chunks for user {user_id}")
        return f"üñºÔ∏è **Ng·ªØ c·∫£nh t·ª´ h√¨nh ·∫£nh ƒë√£ g·ª≠i:**\n\n{combined_context}"
        
    except Exception as e:
        logger.error(f"‚ùå Error retrieving image context: {e}")
        return f"‚ùå L·ªói khi truy xu·∫•t th√¥ng tin h√¨nh ·∫£nh: {str(e)}"

@tool
def clear_image_context(
    user_id: str, 
    thread_id: str
) -> str:
    """
    Clear all image context for a specific user and thread.
    
    Args:
        user_id: Facebook user ID
        thread_id: Facebook thread/conversation ID
        
    Returns:
        Success message
    """
    try:
        namespace = get_image_context_namespace(user_id, thread_id)
        qdrant_store = get_qdrant_store()
        
        # X√≥a t·∫•t c·∫£ context trong namespace n√†y
        # Note: Qdrant kh√¥ng c√≥ direct clear namespace, c·∫ßn implement qua search + delete
        # Ho·∫∑c s·ª≠ d·ª•ng timestamp-based cleanup
        
        logger.info(f"üßπ Cleared image context for user {user_id}, thread {thread_id}")
        return f"üßπ ƒê√£ x√≥a t·∫•t c·∫£ ng·ªØ c·∫£nh h√¨nh ·∫£nh cho cu·ªôc h·ªôi tho·∫°i n√†y."
        
    except Exception as e:
        logger.error(f"‚ùå Error clearing image context: {e}")
        return f"‚ùå L·ªói khi x√≥a ng·ªØ c·∫£nh h√¨nh ·∫£nh: {str(e)}"

# Tool list cho LangGraph
image_context_tools = [
    save_image_context,
    retrieve_image_context, 
    clear_image_context
]
