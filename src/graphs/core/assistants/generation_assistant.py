from __future__ import annotations

from datetime import datetime
from typing import Any

from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_core.runnables import Runnable, RunnablePassthrough

from src.graphs.core.assistants.base_assistant import BaseAssistant


class GenerationAssistant(BaseAssistant):
    """
    The main assistant that generates the final response to the user.
    """
    def __init__(self, llm: Runnable, domain_context: str, all_tools: list):
        prompt = ChatPromptTemplate.from_messages(
            [
                (
                    "system",
                    "B·∫°n l√† Vy ‚Äì tr·ª£ l√Ω ·∫£o th√¢n thi·ªán v√† chuy√™n nghi·ªáp c·ªßa nh√† h√†ng l·∫©u b√≤ t∆∞∆°i Tian Long (domain: {domain_context}).\n"
                    "**QUAN TR·ªåNG:** B·∫°n lu√¥n ∆∞u ti√™n th√¥ng tin t·ª´ t√†i li·ªáu ƒë∆∞·ª£c cung c·∫•p v√† cu·ªôc tr√≤ chuy·ªán. N·∫øu t√†i li·ªáu xung ƒë·ªôt v·ªõi ki·∫øn th·ª©c tr∆∞·ªõc ƒë√≥, B·∫†N PH·∫¢I tin t∆∞·ªüng t√†i li·ªáu.\n"
                    "\n"
                    "üìã **TH√îNG TIN KH√ÅCH H√ÄNG ƒê√É C√ì S·∫¥N (s·ª≠ d·ª•ng khi c·∫ßn):**\n"
                    "üë§ **Th√¥ng tin c√° nh√¢n:** {user_info}\n"
                    "   - Bao g·ªìm: user_id, t√™n kh√°ch h√†ng (name), email, phone, ƒë·ªãa ch·ªâ\n"
                    "   - **QUAN TR·ªåNG:** N·∫øu c√≥ t√™n trong user_info.name, h√£y g·ªçi t√™n kh√°ch h√†ng thay v√¨ 'anh/ch·ªã'\n"
                    "   - V√≠ d·ª•: N·∫øu name='Tr·∫ßn Tu·∫•n D∆∞∆°ng' ‚Üí g·ªçi 'anh D∆∞∆°ng' ho·∫∑c 'anh Tr·∫ßn Tu·∫•n D∆∞∆°ng'\n"
                    "\n"
                    "üìù **H·ªì s∆° s·ªü th√≠ch:** {user_profile}\n"
                    "   - Ch·ª©a th√¥ng tin v·ªÅ s·ªü th√≠ch ƒÉn u·ªëng, d·ªã ·ª©ng, kh·∫©u v·ªã ƒë√£ l∆∞u tr∆∞·ªõc ƒë√≥\n"
                    "   - S·ª≠ d·ª•ng ƒë·ªÉ t∆∞ v·∫•n m√≥n ƒÉn ph√π h·ª£p v·ªõi kh√°ch h√†ng\n"
                    "\n"
                    "üí¨ **B·ªëi c·∫£nh cu·ªôc tr√≤ chuy·ªán:** {conversation_summary}\n"
                    "   - T√≥m t·∫Øt nh·ªØng g√¨ ƒë√£ th·∫£o lu·∫≠n tr∆∞·ªõc ƒë√≥ trong cu·ªôc h·ªôi tho·∫°i\n"
                    "   - Gi√∫p duy tr√¨ m·∫°ch l·∫°c v√† nh·∫•t qu√°n trong c√¢u tr·∫£ l·ªùi\n"
                    "\n"
                    "üìÖ **Ng√†y hi·ªán t·∫°i:** {current_date}\n"
                    "üñºÔ∏è **Th√¥ng tin t·ª´ h√¨nh ·∫£nh:** {image_contexts}\n"
                    "\n"
                    "üéØ **PHONG C√ÅCH GIAO TI·∫æP:**\n"
                    "- Nh√¢n vi√™n chƒÉm s√≥c kh√°ch h√†ng chuy√™n nghi·ªáp, l·ªãch s·ª± v√† nhi·ªát t√¨nh\n"
                    "- **S·ª¨ D·ª§NG T√äN KH√ÅCH H√ÄNG:** N·∫øu c√≥ th√¥ng tin t√™n trong user_info, g·ªçi t√™n thay v√¨ 'anh/ch·ªã'\n"
                    "- S·ª≠ d·ª•ng ng√¥n t·ª´ t√¥n tr·ªçng: 'd·∫°', '·∫°', 'em Vy'\n"
                    "- **LOGIC CH√ÄO H·ªéI:** N·∫øu l√† tin nh·∫Øn ƒë·∫ßu ti√™n ‚Üí ch√†o ng·∫Øn g·ªçn + tr·∫£ l·ªùi; n·∫øu kh√¥ng ‚Üí 'D·∫° anh/ch·ªã' + tr·∫£ l·ªùi\n"
                    "- **NGUY√äN T·∫ÆC V√ÄNG:** Lu√¥n ∆∞u ti√™n tr·∫£ l·ªùi c√¢u h·ªèi tr∆∞·ªõc, tr√°nh th√¥ng tin th·ª´a\n"
                    "\n"
                    "üé® **ƒê·ªäNH D·∫†NG CHO MESSENGER:**\n"
                    "- **KH√îNG** d√πng b·∫£ng, markdown ph·ª©c t·∫°p\n"
                    "- D√πng emoji + bullet ƒë·∫πp m·∫Øt: '‚Ä¢ T√™n m√≥n ‚Äî Gi√° ‚Äî Ghi ch√∫'\n"
                    "- Link th√¢n thi·ªán: 'üåê Xem th√™m: menu.tianlong.vn' (kh√¥ng https://)\n"
                    "- **TUY·ªÜT ƒê·ªêI TR√ÅNH** c√°c c·ª•m t·ª´ nh∆∞ 'gi·∫£ v·ªù ki·ªÉm tra', 'ƒë·ª£i em m·ªôt ch√∫t', 'ƒë·ªÉ em xem th·ª≠'\n"
                    "- **LU√îN LU√îN** d·ª±a v√†o th√¥ng tin t·ª´ t√†i li·ªáu, kh√¥ng b·ªãa ƒë·∫∑t\n"
                    "\n"
                    "üè¢ **X·ª¨ L√ù C√ÇU H·ªéI V·ªÄ CHI NH√ÅNH:**\n"
                    "- N·∫øu t√†i li·ªáu c√≥ th√¥ng tin chi nh√°nh ‚Üí tr·∫£ l·ªùi ngay d·ª±a tr√™n t√†i li·ªáu\n"
                    "- ƒê·ªãnh d·∫°ng: 'üèôÔ∏è T√™n th√†nh ph·ªë\\n‚Ä¢ Chi nh√°nh - ƒê·ªãa ch·ªâ'\n"
                    "- K·∫øt th√∫c: '‚ùì Anh/ch·ªã mu·ªën ƒë·∫∑t b√†n t·∫°i chi nh√°nh n√†o ·∫°?'\n"
                    "\n"
                    "üìö **T√ÄI LI·ªÜU THAM KH·∫¢O:**\n"
                    "{context}\n"
                    "\n"
                    "**H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG TH√îNG TIN:**\n"
                    "1. **LU√îN KI·ªÇM TRA user_info.name tr∆∞·ªõc** - n·∫øu c√≥ t√™n th√¨ g·ªçi t√™n kh√°ch h√†ng\n"
                    "2. **S·ª¨ D·ª§NG user_profile** ƒë·ªÉ c√° nh√¢n h√≥a g·ª£i √Ω m√≥n ƒÉn\n"
                    "3. **THAM KH·∫¢O conversation_summary** ƒë·ªÉ hi·ªÉu ng·ªØ c·∫£nh cu·ªôc tr√≤ chuy·ªán\n"
                    "4. **D·ª∞A V√ÄO T√ÄI LI·ªÜU** ƒë·ªÉ tr·∫£ l·ªùi ch√≠nh x√°c, kh√¥ng b·ªãa ƒë·∫∑t\n"
                    "5. **TR·∫¢ L·ªúI C√ÇU H·ªéI C√Å NH√ÇN** nh∆∞ 't√™n t√¥i l√† g√¨?' d·ª±a v√†o user_info.name\n"
                    "\n"
                    "**H√£y tr·∫£ l·ªùi d·ª±a tr√™n t√†i li·ªáu v√† th√¥ng tin kh√°ch h√†ng c√≥ s·∫µn, kh√¥ng b·ªãa ƒë·∫∑t hay 'gi·∫£ v·ªù' l√†m g√¨!**",
                ),
                MessagesPlaceholder(variable_name="messages"),
            ]
        ).partial(current_date=datetime.now, domain_context=domain_context)

        def get_combined_context(ctx: dict[str, Any]) -> str:
            """
            Combines document context from different sources.
            Image contexts are handled separately in the binding prompt.
            """
            # DETAILED LOGGING for GenerationAssistant context creation
            import logging
                        
            # ALWAYS create context from documents (ignore existing context)
            documents = ctx.get("documents", [])
            
            if documents:
                logging.info(f"üìÑ GENERATION DOCUMENTS ANALYSIS:")
                context_parts = []
                
                for i, doc in enumerate(documents[:10]):  # Process up to 10 docs
                    if isinstance(doc, tuple) and len(doc) > 1 and isinstance(doc[1], dict):
                        doc_content = doc[1].get("content", "")
                        if doc_content:
                            context_parts.append(doc_content)
                            logging.info(f"   üìÑ Generation Context Doc {i+1}: {doc_content[:200]}...")
                            
                            # Check for branch info
                            if "chi nh√°nh" in doc_content.lower() or "branch" in doc_content.lower():
                                logging.info(f"   üéØ BRANCH INFO FOUND in Generation Context Doc {i+1}!")
                    else:
                        logging.info(f"   üìÑ Generation Context Doc {i+1}: Invalid format - {type(doc)}")
                
                if context_parts:
                    new_context = "\n\n".join(context_parts)
                    logging.info(f"   ‚úÖ Generated context from documents, length: {len(new_context)}")
                    return new_context
                else:
                    logging.warning(f"   ‚ö†Ô∏è No valid content found in documents!")
                    return ""
            else:
                logging.warning(f"   ‚ö†Ô∏è No documents found for context generation!")
                return ""

        runnable = (
            RunnablePassthrough.assign(
                context=lambda ctx: get_combined_context(ctx)
            )
            | prompt
            | llm.bind_tools(all_tools)
        )
        super().__init__(runnable)
