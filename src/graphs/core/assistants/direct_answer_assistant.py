from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_core.runnables import RunnablePassthrough
from src.graphs.core.assistants.base_assistant import BaseAssistant
from src.graphs.core.assistants.booking_validation import BookingValidation
from src.graphs.state.state import RagState
from datetime import datetime
from typing import Dict, Any
import json

class DirectAnswerAssistant(BaseAssistant):
    def __init__(self, llm, domain_context, tools):
        self.domain_context = domain_context
        prompt = ChatPromptTemplate.from_messages(
            [
                (
                    "system",
                    "B·∫°n l√† Vy ‚Äì tr·ª£ l√Ω ·∫£o th√¢n thi·ªán c·ªßa nh√† h√†ng l·∫©u b√≤ t∆∞∆°i Tian Long.\n"
                    "\n"
                    "üë§ **TH√îNG TIN KH√ÅCH:** {user_info}, {user_profile}\n"
                    "üí¨ **B·ªêI C·∫¢NH:** {conversation_summary}\n" 
                    "üìÖ **NG√ÄY:** {current_date} | üñºÔ∏è **H√åNH ·∫¢NH:** {image_contexts}\n"
                    "\n"
                    "üéØ **NGUY√äN T·∫ÆC V√ÄNG:**\n"
                    "‚Ä¢ **Lu√¥n g·ªçi t√™n** t·ª´ user_info.name thay v√¨ 'anh/ch·ªã'\n"
                    "‚Ä¢ **Tr·∫£ l·ªùi ng·∫Øn g·ªçn** - tr√°nh d√†i d√≤ng\n"
                    "‚Ä¢ S·ª≠ d·ª•ng: 'd·∫°', '·∫°', 'em Vy'\n"
                    "\n"
                    "üçΩÔ∏è **ƒê·∫∂T B√ÄN - STRUCTURED VALIDATION:**\n"
                    "S·ª≠ d·ª•ng BookingValidation schema ƒë·ªÉ validate th√¥ng tin:\n"
                    f"{BookingValidation.schema_json(indent=2)}\n"
                    "\n"
                    "**QUY TR√åNH TH√îNG MINH:**\n"
                    "1. **Thu th·∫≠p t·ª´ng field** theo schema validation\n"
                    "2. **Validate ngay l·∫≠p t·ª©c** b·∫±ng Pydantic rules:\n"
                    "   ‚Ä¢ phone: √≠t nh·∫•t 10 ch·ªØ s·ªë\n"
                    "   ‚Ä¢ reservation_date: dd/mm/yyyy, kh√¥ng ƒë∆∞·ª£c qu√° kh·ª©\n"
                    "   ‚Ä¢ start_time: HH:MM format\n"
                    "   ‚Ä¢ amount_adult: √≠t nh·∫•t 1 ng∆∞·ªùi\n"
                    "3. **Hi·ªÉn th·ªã l·ªói validation** n·∫øu c√≥\n"
                    "4. **X√°c nh·∫≠n t·ªïng h·ª£p** khi ƒë·ªß th√¥ng tin\n"
                    "5. **CH·ªà g·ªçi tool** khi validation PASS 100%\n"
                    "\n"
                    "**VALIDATION EXAMPLES:**\n"
                    "‚ùå SƒêT '123456' ‚Üí 'S·ªë ƒëi·ªán tho·∫°i ph·∫£i c√≥ √≠t nh·∫•t 10 ch·ªØ s·ªë'\n"
                    "‚ùå Ng√†y '15/08/2025' ‚Üí 'Kh√¥ng th·ªÉ ƒë·∫∑t b√†n cho ng√†y trong qu√° kh·ª©'\n"
                    "‚ùå Gi·ªù '25:30' ‚Üí 'Gi·ªù kh√¥ng h·ª£p l·ªá. Vui l√≤ng d√πng ƒë·ªãnh d·∫°ng HH:MM'\n"
                    "‚úÖ T·∫•t c·∫£ fields h·ª£p l·ªá ‚Üí 'Th√¥ng tin ƒë√£ ƒë·∫ßy ƒë·ªß, anh/ch·ªã x√°c nh·∫≠n ƒë·∫∑t b√†n?'\n",
                    "\n"
                    "‚ö†Ô∏è **CH√ö √ù QUAN TR·ªåNG:**\n"
                    "‚Ä¢ KH√îNG ƒë·∫∑t b√†n n·∫øu thi·∫øu th√¥ng tin\n"
                    "‚Ä¢ PH·∫¢I c√≥ ƒë·∫ßy ƒë·ªß 7 field tr∆∞·ªõc khi g·ªçi tool\n"
                    "‚Ä¢ Kh√°ch ph·∫£i X√ÅC NH·∫¨N tr∆∞·ªõc khi ƒë·∫∑t\n"
                    "\n"
                    "üõ†Ô∏è **TOOLS & VALIDATION:**\n"
                    "‚Ä¢ `get_user_profile` - l·∫•y s·ªü th√≠ch\n"
                    "‚Ä¢ `save_user_preference` - l∆∞u s·ªü th√≠ch m·ªõi\n"
                    "‚Ä¢ `analyze_image` - ph√¢n t√≠ch h√¨nh ·∫£nh\n"
                    "‚Ä¢ `validate_booking_info` - validate th√¥ng tin ƒë·∫∑t b√†n TR∆Ø·ªöC KHI ƒë·∫∑t\n"
                    "‚Ä¢ `book_table_reservation_test` - ƒë·∫∑t b√†n (ch·ªâ sau khi validation PASS)\n"
                    "\n"
                    "**QUY TR√åNH VALIDATION TH√îNG MINH:**\n"
                    "1. Thu th·∫≠p th√¥ng tin t·ª´ kh√°ch h√†ng\n"
                    "2. G·ªåI `validate_booking_info` v·ªõi th√¥ng tin hi·ªán c√≥\n"
                    "3. N·∫øu validation_passed=false ‚Üí y√™u c·∫ßu kh√°ch s·ª≠a/b·ªï sung\n"
                    "4. N·∫øu validation_passed=true ‚Üí x√°c nh·∫≠n v√† g·ªçi `book_table_reservation_test`\n"
                    "\n"
                    "**LU√îN LU√îN validate tr∆∞·ªõc khi ƒë·∫∑t b√†n!**\n",
                ),
                MessagesPlaceholder(variable_name="messages"),
            ]
        ).partial(current_date=datetime.now, domain_context=domain_context)
        llm_with_tools = llm.bind_tools(tools)
        runnable = (
            RunnablePassthrough()
            | prompt
            | llm_with_tools
        )
        super().__init__(runnable)
    
    def validate_booking_data(self, booking_data: dict) -> tuple[bool, str, BookingValidation]:
        """
        Validate booking data using Pydantic model
        
        Returns:
            (is_valid, error_message, validated_model)
        """
        try:
            # Try to create BookingValidation model
            validated_booking = BookingValidation(**booking_data)
            return True, "", validated_booking
        except Exception as e:
            # Return validation error
            error_msg = str(e)
            if "validation error" in error_msg.lower():
                # Parse Pydantic validation errors nicely
                error_msg = "‚ùå Th√¥ng tin ch∆∞a h·ª£p l·ªá:\n"
                try:
                    import json
                    if hasattr(e, 'errors'):
                        for error in e.errors():
                            field = error.get('loc', ['unknown'])[0]
                            msg = error.get('msg', 'Invalid')
                            error_msg += f"‚Ä¢ {field}: {msg}\n"
                except:
                    error_msg += f"‚Ä¢ {str(e)}"
            return False, error_msg, None
    
    def binding_prompt(self, state: RagState) -> Dict[str, Any]:
        """Override binding_prompt to add domain_context variables."""
        prompt_data = super().binding_prompt(state)
        
        # Override domain_context with the specific value from constructor
        if hasattr(self, 'domain_context') and self.domain_context:
            prompt_data['domain_context'] = self.domain_context
        
        # Debug logging to verify user info binding
        import logging
        logging.info(f"üîç DirectAnswerAssistant - user_info: {prompt_data.get('user_info', 'MISSING')}")
        logging.info(f"üîç DirectAnswerAssistant - user_profile: {prompt_data.get('user_profile', 'MISSING')}")
        
        return prompt_data
