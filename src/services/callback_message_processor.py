"""
Callback-based Message Processing System
X·ª≠ l√Ω images tr∆∞·ªõc, sau ƒë√≥ callback ƒë·ªÉ x·ª≠ l√Ω text v·ªõi context ƒë√£ c√≥
"""

import asyncio
import logging
import time
from typing import Dict, List, Optional, Callable, Any
from dataclasses import dataclass

logger = logging.getLogger(__name__)

@dataclass
class PendingTextMessage:
    """Text message ƒëang ch·ªù image context"""
    user_id: str
    thread_id: str
    text: str
    message_data: dict
    timestamp: float
    retry_count: int = 0
    max_retries: int = 3

@dataclass
class ProcessingResult:
    """K·∫øt qu·∫£ x·ª≠ l√Ω message"""
    success: bool
    message_type: str  # 'image' | 'text' 
    context_created: bool = False
    response_sent: bool = False
    error: Optional[str] = None

class CallbackMessageProcessor:
    """
    Processor s·ª≠ d·ª•ng callback thay v√¨ timeout:
    1. Image messages ƒë∆∞·ª£c x·ª≠ l√Ω ngay l·∫≠p t·ª©c (priority cao)
    2. Text messages ƒë∆∞·ª£c hold l·∫°i n·∫øu c√≥ kh·∫£ nƒÉng li√™n quan ƒë·∫øn image
    3. Sau khi image processed ‚Üí callback ƒë·ªÉ x·ª≠ l√Ω pending text messages
    """
    
    def __init__(self, facebook_service, redis_queue=None):
        self.facebook_service = facebook_service
        self.redis_queue = redis_queue
        
        # Pending text messages ch·ªù image context
        self.pending_texts: Dict[str, List[PendingTextMessage]] = {}
        
        # Image processing callbacks
        self.image_callbacks: Dict[str, List[Callable]] = {}
        
        # Metrics
        self.stats = {
            'images_processed': 0,
            'texts_processed': 0,
            'callbacks_executed': 0,
            'pending_texts_resolved': 0
        }
        
    async def process_batch(self, user_id: str, thread_id: str, 
                           text: str = "", attachments: List[dict] = None, 
                           message_data: dict = None) -> ProcessingResult:
        """
        IMMEDIATE Entry point cho batch processing v·ªõi callback system:
        1. Ph√¢n lo·∫°i message th√†nh image + text
        2. X·ª≠ l√Ω image tr∆∞·ªõc (n·∫øu c√≥) - NGAY L·∫¨P T·ª®C
        3. Callback x·ª≠ l√Ω text sau (n·∫øu c√≥) - NGAY L·∫¨P T·ª®C
        
        *** NO DELAYS - IMMEDIATE PROCESSING ***
        """
        attachments = attachments or []
        message_data = message_data or {}
        
        # Ph√¢n lo·∫°i message trong batch
        image_attachments = [att for att in attachments if att.get('type') == 'image']
        has_images = len(image_attachments) > 0
        has_text = bool(text and text.strip())
        
        logger.info(f"üìã IMMEDIATE BATCH PROCESSING: {user_id} - Images: {len(image_attachments)}, Text: {'Yes' if has_text else 'No'}")
        
        try:
            if has_images and has_text:
                # BATCH c√≥ c·∫£ image v√† text ‚Üí Image tr∆∞·ªõc NGAY, Text callback NGAY sau
                logger.info(f"üîÑ Mixed batch: IMMEDIATE processing - images first, then text callback")
                return await self._process_mixed_batch_immediate(user_id, thread_id, text, image_attachments, message_data)
            
            elif has_images and not has_text:
                # BATCH ch·ªâ c√≥ image ‚Üí X·ª≠ l√Ω image NGAY
                logger.info(f"üñºÔ∏è Image-only batch: IMMEDIATE processing for context")
                return await self._process_image_only_batch(user_id, thread_id, image_attachments, message_data)
            
            elif has_text and not has_images:
                # BATCH ch·ªâ c√≥ text ‚Üí X·ª≠ l√Ω text NGAY
                logger.info(f"üìù Text-only batch: IMMEDIATE processing")
                return await self._process_text_only_batch(user_id, thread_id, text, message_data)
            
            else:
                # BATCH r·ªóng
                return ProcessingResult(
                    success=False,
                    message_type='empty',
                    error="Empty batch - no content to process"
                )
                
        except Exception as e:
            logger.error(f"‚ùå Immediate batch processing error: {e}")
            return ProcessingResult(
                success=False,
                message_type='batch',
                error=str(e)
            )
    
    async def _process_mixed_batch_immediate(self, user_id: str, thread_id: str, 
                                            text: str, image_attachments: List[dict], 
                                            message_data: dict) -> ProcessingResult:
        """
        IMMEDIATE x·ª≠ l√Ω batch c√≥ c·∫£ image v√† text:
        1. X·ª≠ l√Ω image tr∆∞·ªõc ƒë·ªÉ t·∫°o context - NGAY L·∫¨P T·ª®C
        2. Callback x·ª≠ l√Ω text v·ªõi context ƒë√£ c√≥ - NGAY L·∫¨P T·ª®C TRONG C√ôNG THREAD
        
        *** NO ASYNC DELAYS - SEQUENTIAL IMMEDIATE PROCESSING ***
        """
        try:
            # STEP 1: X·ª≠ l√Ω image tr∆∞·ªõc (KH√îNG g·ª≠i response) - NGAY L·∫¨P T·ª®C
            logger.info(f"üñºÔ∏è STEP 1 IMMEDIATE: Processing {len(image_attachments)} images for context")
            
            context_data = {
                'user_id': user_id,
                'thread_id': thread_id,
                'text': '',  # Ch·ªâ image
                'attachments': image_attachments,
                'message_data': message_data,
                'processing_priority': 'high',
                'immediate_processing': True  # Flag ƒë·ªÉ b√°o x·ª≠ l√Ω ngay
            }
            
            # X·ª≠ l√Ω image NGAY - kh√¥ng async delay
            await self.facebook_service._process_aggregated_context_from_queue(user_id, context_data)
            self.stats['images_processed'] += 1
            
            logger.info(f"üìù STEP 2 IMMEDIATE: Processing text with fresh image context")
            
            # STEP 2: Callback x·ª≠ l√Ω text v·ªõi context ƒë√£ c√≥ - NGAY L·∫¨P T·ª®C
            text_context_data = {
                'user_id': user_id,
                'thread_id': thread_id,
                'text': text,
                'attachments': [],  # Ch·ªâ text
                'message_data': message_data,
                'processing_priority': 'normal',
                'immediate_processing': True,  # Flag ƒë·ªÉ b√°o x·ª≠ l√Ω ngay
                'has_fresh_image_context': True  # Context v·ª´a m·ªõi t·∫°o
            }
            
            # X·ª≠ l√Ω text NGAY v·ªõi context m·ªõi - kh√¥ng async delay
            await self.facebook_service._process_aggregated_context_from_queue(user_id, text_context_data)
            self.stats['texts_processed'] += 1
            self.stats['callbacks_executed'] += 1
            
            return ProcessingResult(
                success=True,
                message_type='mixed_immediate',
                context_created=True,
                response_sent=True  # Text response ƒë∆∞·ª£c g·ª≠i ngay
            )
            
        except Exception as e:
            logger.error(f"‚ùå Immediate mixed batch processing error: {e}")
            return ProcessingResult(
                success=False,
                message_type='mixed_immediate',
                error=str(e)
            )

    async def _process_mixed_batch(self, user_id: str, thread_id: str, 
                                  text: str, image_attachments: List[dict], 
                                  message_data: dict) -> ProcessingResult:
        """
        X·ª≠ l√Ω batch c√≥ c·∫£ image v√† text:
        1. X·ª≠ l√Ω image tr∆∞·ªõc ƒë·ªÉ t·∫°o context
        2. Callback x·ª≠ l√Ω text v·ªõi context ƒë√£ c√≥
        """
        try:
            # STEP 1: X·ª≠ l√Ω image tr∆∞·ªõc (KH√îNG g·ª≠i response)
            logger.info(f"üñºÔ∏è STEP 1: Processing {len(image_attachments)} images for context")
            
            context_data = {
                'user_id': user_id,
                'thread_id': thread_id,
                'text': '',  # Ch·ªâ image
                'attachments': image_attachments,
                'message_data': message_data,
                'processing_priority': 'high'
            }
            
            await self.facebook_service._process_aggregated_context_from_queue(user_id, context_data)
            self.stats['images_processed'] += 1
            
            # STEP 2: Callback x·ª≠ l√Ω text v·ªõi context ƒë√£ c√≥
            logger.info(f"üìù STEP 2: Callback processing text with image context")
            
            text_context_data = {
                'user_id': user_id,
                'thread_id': thread_id,
                'text': text,
                'attachments': [],  # Ch·ªâ text
                'message_data': message_data,
                'processing_priority': 'normal'
            }
            
            await self.facebook_service._process_aggregated_context_from_queue(user_id, text_context_data)
            self.stats['texts_processed'] += 1
            self.stats['callbacks_executed'] += 1
            
            return ProcessingResult(
                success=True,
                message_type='mixed',
                context_created=True,
                response_sent=True  # Text response ƒë∆∞·ª£c g·ª≠i
            )
            
        except Exception as e:
            logger.error(f"‚ùå Mixed batch processing error: {e}")
            return ProcessingResult(
                success=False,
                message_type='mixed',
                error=str(e)
            )
    
    async def _process_image_only_batch(self, user_id: str, thread_id: str, 
                                       image_attachments: List[dict], 
                                       message_data: dict) -> ProcessingResult:
        """X·ª≠ l√Ω batch ch·ªâ c√≥ image - t·∫°o context, KH√îNG g·ª≠i response"""
        try:
            context_data = {
                'user_id': user_id,
                'thread_id': thread_id,
                'text': '',
                'attachments': image_attachments,
                'message_data': message_data,
                'processing_priority': 'high'
            }
            
            await self.facebook_service._process_aggregated_context_from_queue(user_id, context_data)
            self.stats['images_processed'] += 1
            
            return ProcessingResult(
                success=True,
                message_type='image',
                context_created=True,
                response_sent=False  # Image kh√¥ng g·ª≠i response
            )
            
        except Exception as e:
            logger.error(f"‚ùå Image-only batch processing error: {e}")
            return ProcessingResult(
                success=False,
                message_type='image',
                error=str(e)
            )
    
    async def _process_text_only_batch(self, user_id: str, thread_id: str, 
                                      text: str, message_data: dict) -> ProcessingResult:
        """X·ª≠ l√Ω batch ch·ªâ c√≥ text"""
        try:
            context_data = {
                'user_id': user_id,
                'thread_id': thread_id,
                'text': text,
                'attachments': [],
                'message_data': message_data,
                'processing_priority': 'normal'
            }
            
            await self.facebook_service._process_aggregated_context_from_queue(user_id, context_data)
            self.stats['texts_processed'] += 1
            
            return ProcessingResult(
                success=True,
                message_type='text',
                response_sent=True
            )
            
        except Exception as e:
            logger.error(f"‚ùå Text-only batch processing error: {e}")
            return ProcessingResult(
                success=False,
                message_type='text',
                error=str(e)
            )
    
    def get_stats(self) -> dict:
        """L·∫•y statistics"""
        return {
            **self.stats,
            'active_processing': len(self.pending_texts) if hasattr(self, 'pending_texts') else 0
        }
