import os
from qdrant_client import QdrantClient
from qdrant_client.models import Filter, FieldCondition, MatchValue

# L·∫•y th√¥ng tin k·∫øt n·ªëi t·ª´ bi·∫øn m√¥i tr∆∞·ªùng ho·∫∑c s·ª≠a tr·ª±c ti·∫øp t·∫°i ƒë√¢y
QDRANT_HOST = os.getenv("QDRANT_HOST", "69.197.187.234")
QDRANT_PORT = int(os.getenv("QDRANT_PORT", "6333"))
COLLECTION_NAME = "aladin_maketing"  # ƒê·ªïi t√™n collection n·∫øu c·∫ßn
NAMESPACE = "maketing"  # ƒê·ªïi namespace c·∫ßn x√≥a

client = QdrantClient(host=QDRANT_HOST, port=QDRANT_PORT)

def delete_by_namespace(collection_name: str, namespace: str):
    """
    X√≥a t·∫•t c·∫£ vectors theo namespace trong collection
    """
    try:
        # Ki·ªÉm tra collection c√≥ t·ªìn t·∫°i kh√¥ng
        collections = client.get_collections().collections
        collection_exists = any(col.name == collection_name for col in collections)
        
        if not collection_exists:
            print(f"‚ùå Collection '{collection_name}' kh√¥ng t·ªìn t·∫°i.")
            return
            
        print(f"üîç ƒêang t√¨m v√† x√≥a vectors v·ªõi namespace '{namespace}' trong collection '{collection_name}'...")
        
        # T·∫°o filter ƒë·ªÉ t√¨m vectors theo namespace
        namespace_filter = Filter(
            must=[
                FieldCondition(
                    key="namespace",
                    match=MatchValue(value=namespace)
                )
            ]
        )
        
        # ƒê·∫øm s·ªë l∆∞·ª£ng vectors s·∫Ω b·ªã x√≥a tr∆∞·ªõc khi x√≥a
        search_result = client.scroll(
            collection_name=collection_name,
            scroll_filter=namespace_filter,
            limit=1,  # Ch·ªâ l·∫•y 1 ƒë·ªÉ ƒë·∫øm
            with_payload=True,
            with_vectors=False
        )
        
        if not search_result[0]:  # Kh√¥ng c√≥ vectors n√†o
            print(f"‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y vectors n√†o v·ªõi namespace '{namespace}' trong collection '{collection_name}'.")
            return
            
        # X√≥a vectors theo filter
        delete_result = client.delete(
            collection_name=collection_name,
            points_selector=namespace_filter
        )
        
        print(f"‚úÖ ƒê√£ x√≥a vectors v·ªõi namespace '{namespace}' trong collection '{collection_name}' th√†nh c√¥ng.")
        print(f"üìä K·∫øt qu·∫£ x√≥a: {delete_result}")
        
    except Exception as e:
        print(f"‚ùå L·ªói khi x√≥a namespace '{namespace}' trong collection '{collection_name}': {e}")

def list_namespaces(collection_name: str):
    """
    Li·ªát k√™ t·∫•t c·∫£ namespace c√≥ trong collection
    """
    try:
        # Ki·ªÉm tra collection c√≥ t·ªìn t·∫°i kh√¥ng
        collections = client.get_collections().collections
        collection_exists = any(col.name == collection_name for col in collections)
        
        if not collection_exists:
            print(f"‚ùå Collection '{collection_name}' kh√¥ng t·ªìn t·∫°i.")
            return
            
        print(f"üîç ƒêang qu√©t namespaces trong collection '{collection_name}'...")
        
        # Scroll qua t·∫•t c·∫£ vectors ƒë·ªÉ t√¨m unique namespaces
        namespaces = set()
        next_page_offset = None
        
        while True:
            scroll_result = client.scroll(
                collection_name=collection_name,
                limit=100,  # L·∫•y 100 vectors m·ªói l·∫ßn
                offset=next_page_offset,
                with_payload=True,
                with_vectors=False
            )
            
            points, next_page_offset = scroll_result
            
            if not points:
                break
                
            for point in points:
                if point.payload and "namespace" in point.payload:
                    namespaces.add(point.payload["namespace"])
            
            if next_page_offset is None:
                break
        
        if namespaces:
            print(f"üìã Danh s√°ch namespaces trong collection '{collection_name}':")
            for i, ns in enumerate(sorted(namespaces), 1):
                print(f"   {i}. {ns}")
        else:
            print(f"‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y namespace n√†o trong collection '{collection_name}'.")
            
    except Exception as e:
        print(f"‚ùå L·ªói khi li·ªát k√™ namespaces trong collection '{collection_name}': {e}")

if __name__ == "__main__":
    print("=" * 60)
    print("üóëÔ∏è  QDRANT NAMESPACE DELETION TOOL")
    print("=" * 60)
    
    # Li·ªát k√™ namespaces tr∆∞·ªõc khi x√≥a
    print("1Ô∏è‚É£ Li·ªát k√™ namespaces hi·ªán c√≥:")
    list_namespaces(COLLECTION_NAME)
    
    print("\n" + "=" * 60)
    
    # X√°c nh·∫≠n tr∆∞·ªõc khi x√≥a
    print(f"‚ö†Ô∏è  C·∫¢NH B√ÅO: B·∫°n s·∫Øp x√≥a T·∫§T C·∫¢ vectors v·ªõi namespace '{NAMESPACE}' trong collection '{COLLECTION_NAME}'!")
    confirm = input("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c? (yes/no): ").lower().strip()
    
    if confirm in ['yes', 'y']:
        print("\n2Ô∏è‚É£ ƒêang th·ª±c hi·ªán x√≥a namespace:")
        delete_by_namespace(COLLECTION_NAME, NAMESPACE)
        
        print("\n3Ô∏è‚É£ Ki·ªÉm tra namespaces sau khi x√≥a:")
        list_namespaces(COLLECTION_NAME)
    else:
        print("‚ùå ƒê√£ h·ªßy thao t√°c x√≥a.")
    
    print("\n" + "=" * 60)
    print("‚úÖ Ho√†n th√†nh!")
