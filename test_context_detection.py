#!/usr/bin/env python3
"""
Test intelligent context storage detection
"""

import re

def _is_context_storage_response(response: str) -> bool:
    """
    Intelligently detect if AI response indicates successful context storage.
    This replaces hardcoded Vietnamese text matching with pattern-based detection.
    """
    if not response or not isinstance(response, str):
        return False
        
    response_lower = response.lower().strip()
    
    # Pattern 1: Success indicators with context/analysis keywords
    context_keywords = ['ng·ªØ c·∫£nh', 'context', 'th√¥ng tin', 'ph√¢n t√≠ch', 'l∆∞u', 'save']
    success_indicators = ['‚úÖ', 'th√†nh c√¥ng', 'ho√†n t·∫•t', 'completed', 'success', 'ƒë√£']
    
    has_context_keyword = any(keyword in response_lower for keyword in context_keywords)
    has_success_indicator = any(indicator in response_lower for indicator in success_indicators)
    
    # Pattern 2: Specific patterns that indicate context storage
    storage_patterns = [
        'ƒë√£ l∆∞u',
        'ƒë√£ ph√¢n t√≠ch',
        'context.*save',
        'save.*context',
        'th√¥ng tin.*l∆∞u',
        'l∆∞u.*th√¥ng tin',
        'ph√¢n t√≠ch.*ho√†n',
        'ho√†n.*ph√¢n t√≠ch'
    ]
    
    has_storage_pattern = any(re.search(pattern, response_lower) for pattern in storage_patterns)
    
    # Pattern 3: Response structure indicates context-only processing
    is_short_confirmation = len(response_lower) < 200  # Context storage responses are typically brief
    has_no_question_response = not any(word in response_lower for word in ['g√¨', 'n√†o', '?', 'nh∆∞ th·∫ø n√†o', 'bao nhi√™u'])
    
    # Combine all patterns for intelligent detection
    is_context_storage = (
        (has_context_keyword and has_success_indicator) or
        has_storage_pattern or
        (is_short_confirmation and has_success_indicator and has_context_keyword)
    )
    
    if is_context_storage:
        print(f"üîç Context storage detected: context_kw={has_context_keyword}, success={has_success_indicator}, pattern={has_storage_pattern}")
    
    return is_context_storage

def test_context_detection():
    """Test various response patterns"""
    
    test_cases = [
        # Should detect as context storage
        ("‚úÖ Em ƒë√£ ph√¢n t√≠ch v√† l∆∞u th√¥ng tin v·ªÅ combo n√†y", True),
        ("ƒê√£ l∆∞u ng·ªØ c·∫£nh h√¨nh ·∫£nh th√†nh c√¥ng", True), 
        ("Context saved successfully", True),
        ("‚úÖ Image analysis completed and saved", True),
        ("Th√¥ng tin ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o h·ªá th·ªëng", True),
        ("‚úÖ Ph√¢n t√≠ch ho√†n t·∫•t", True),
        
        # Should NOT detect as context storage
        ("Combo n√†y c√≥ gi√° 999,000 VND, bao g·ªìm nhi·ªÅu lo·∫°i th·ªãt b√≤...", False),
        ("Anh mu·ªën ƒë·∫∑t m√≥n g√¨?", False),
        ("Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?", False),
        ("Nh√† h√†ng c√≥ menu ƒëa d·∫°ng v·ªõi nhi·ªÅu l·ª±a ch·ªçn", False),
        ("", False),
        (None, False)
    ]
    
    print("üß™ Testing Context Storage Detection")
    print("=" * 50)
    
    passed = 0
    total = len(test_cases)
    
    for i, (response, expected) in enumerate(test_cases, 1):
        result = _is_context_storage_response(response)
        status = "‚úÖ PASS" if result == expected else "‚ùå FAIL"
        
        print(f"Test {i:2d}: {status}")
        print(f"  Input: '{response}'")
        print(f"  Expected: {expected}, Got: {result}")
        print()
        
        if result == expected:
            passed += 1
    
    print(f"Results: {passed}/{total} tests passed")
    
    if passed == total:
        print("‚úÖ All tests passed!")
    else:
        print("‚ùå Some tests failed!")

if __name__ == "__main__":
    test_context_detection()
