"""
Integration test cho to√†n b·ªô h·ªá th·ªëng memory v·ªõi LangGraph
"""

import os
import sys

# Th√™m root directory v√†o Python path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), ".."))

import uuid

# Import v·ªõi absolute path t·ª´ root
from src.graphs.travel.travel_graph import graph

# Import memory tools
try:
    from src.tools.memory_tools import save_user_preference, get_user_profile

    MEMORY_AVAILABLE = True
except ImportError as e:
    print(f"Memory tools not available: {e}")
    MEMORY_AVAILABLE = False


def test_memory_integration():
    """Test t√≠ch h·ª£p memory system v·ªõi LangGraph"""
    if not MEMORY_AVAILABLE:
        print("‚ùå Memory tools not available, skipping integration test")
        return

    print("üß™ Testing Full Memory Integration with LangGraph...")

    # Setup
    test_user_id = "test_integration_user"
    thread_id = str(uuid.uuid4())

    config = {
        "configurable": {
            "user_id": test_user_id,
            "thread_id": thread_id,
        }
    }

    # Test 1: Tr∆∞·ªõc ti√™n, l∆∞u m·ªôt s·ªë preference
    print("\n1. Setting up user preferences...")
    preferences = [
        (
            "dietary_restriction",
            "vegetarian, no seafood",
            "mentioned during conversation",
        ),
        ("seat_preference", "window seat", "prefers to look outside"),
        (
            "budget_range",
            "economy to premium economy",
            "cost-conscious but values comfort",
        ),
    ]

    for pref_type, content, context in preferences:
        result = save_user_preference.invoke(
            {
                "user_id": test_user_id,
                "preference_type": pref_type,
                "content": content,
                "context": context,
            }
        )
        print(f"  ‚úÖ {result}")

    # Test 2: Test conversation v·ªõi memory
    print("\n2. Testing conversation with memory...")

    test_conversations = [
        "Xin ch√†o, t√¥i mu·ªën t√¨m hi·ªÉu v·ªÅ chuy·∫øn bay c·ªßa m√¨nh",
        "T√¥i c√≥ th·ªÉ thay ƒë·ªïi ch·ªó ng·ªìi kh√¥ng?",
        "T√¥i mu·ªën ƒë·∫∑t ph√≤ng kh√°ch s·∫°n",
        "C√≥ khuy·∫øn ngh·ªã g√¨ v·ªÅ ƒÉn u·ªëng kh√¥ng?",
    ]

    for i, message in enumerate(test_conversations, 1):
        print(f"\n  Test {i}: {message}")
        try:
            # Stream events from the graph
            events = list(
                graph.stream(
                    {"messages": [("user", message)]}, config, stream_mode="values"
                )
            )

            if events:
                final_event = events[-1]
                if "messages" in final_event:
                    last_message = final_event["messages"][-1]
                    if hasattr(last_message, "content"):
                        print(f"    Bot response: {last_message.content[:200]}...")

                # Check if user_profile was retrieved
                if "user_profile" in final_event:
                    print(f"    User profile: {final_event['user_profile'][:100]}...")

        except Exception as e:
            print(f"    ‚ùå Error in conversation {i}: {e}")

    # Test 3: Ki·ªÉm tra vi·ªác l∆∞u preference m·ªõi trong conversation
    print("\n3. Testing automatic preference saving...")
    preference_message = (
        "T√¥i th√≠ch bay v√†o bu·ªïi s√°ng v√† kh√¥ng th√≠ch ch·ªó ng·ªìi gi·ªØa m√°y bay"
    )

    try:
        events = list(
            graph.stream(
                {"messages": [("user", preference_message)]},
                config,
                stream_mode="values",
            )
        )
        print("  ‚úÖ Conversation completed, checking if preferences were saved...")

        # Check if new preferences were saved
        profile = get_user_profile.invoke(
            {"user_id": test_user_id, "query_context": "flight preferences"}
        )
        print(f"  Updated profile: {profile}")

    except Exception as e:
        print(f"  ‚ùå Error testing preference saving: {e}")

    print("\n‚úÖ Full memory integration test completed!")


def test_memory_retrieval_context():
    """Test context-aware memory retrieval"""
    if not MEMORY_AVAILABLE:
        print("‚ùå Memory tools not available, skipping context test")
        return

    print("\nüß™ Testing Context-Aware Memory Retrieval...")

    test_user_id = "context_test_user"

    # Setup diverse preferences
    preferences = [
        ("flight_preference", "morning flights, aisle seat", "business travel"),
        ("hotel_preference", "4-star, near city center", "work trips"),
        ("dietary_restriction", "gluten-free", "health condition"),
        ("travel_companion", "usually travels alone", "business traveler"),
        ("car_rental_preference", "compact, automatic", "city driving"),
    ]

    for pref_type, content, context in preferences:
        save_user_preference.invoke(
            {
                "user_id": test_user_id,
                "preference_type": pref_type,
                "content": content,
                "context": context,
            }
        )

    # Test context-specific retrieval
    contexts = [
        ("flight booking", "flight"),
        ("hotel booking", "hotel"),
        ("car rental", "car"),
        ("meal planning", "dietary"),
        ("general travel", ""),
    ]

    for context_name, context_query in contexts:
        profile = get_user_profile.invoke(
            {"user_id": test_user_id, "query_context": context_query}
        )
        print(f"\n  Context '{context_name}':")
        print(f"    Profile: {profile}")


if __name__ == "__main__":
    # H·ªá th·ªëng ƒë∆∞·ª£c kh·ªüi t·∫°o khi import (database.py, graph.py)
    # n√™n kh√¥ng c·∫ßn g·ªçi setup ri√™ng ·ªü ƒë√¢y n·ªØa.
    print("üöÄ Starting integration tests...")

    print("\n" + "=" * 50)

    # Run integration test
    test_memory_integration()

    print("\n" + "=" * 50)

    # Run context test
    test_memory_retrieval_context()

    print("\n" + "=" * 50)
    print("‚úÖ All tests completed.")
