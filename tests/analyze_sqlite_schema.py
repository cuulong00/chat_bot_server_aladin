"""
Script ki·ªÉm tra c·∫•u tr√∫c b·∫£ng d·ªØ li·ªáu c·ªßa travel2.sqlite
"""
import os
import sqlite3
import requests
import pandas as pd
from typing import Dict, List, Any

def download_sqlite_db(url: str, local_file: str) -> str:
    """T·∫£i SQLite database t·ª´ URL"""
    if not os.path.exists(local_file):
        print(f"üì• ƒêang t·∫£i database t·ª´ {url}...")
        response = requests.get(url)
        response.raise_for_status()
        
        with open(local_file, "wb") as f:
            f.write(response.content)
        print(f"‚úÖ ƒê√£ t·∫£i v·ªÅ {local_file}")
    else:
        print(f"üìÅ File {local_file} ƒë√£ t·ªìn t·∫°i")
    
    return local_file

def get_table_info(db_path: str) -> Dict[str, Any]:
    """L·∫•y th√¥ng tin chi ti·∫øt v·ªÅ c√°c b·∫£ng trong database"""
    conn = sqlite3.connect(db_path)
    
    try:
        # L·∫•y danh s√°ch t·∫•t c·∫£ b·∫£ng
        tables_query = "SELECT name FROM sqlite_master WHERE type='table';"
        tables_df = pd.read_sql(tables_query, conn)
        table_names = tables_df['name'].tolist()
        
        print(f"üóÉÔ∏è  Database c√≥ {len(table_names)} b·∫£ng:")
        for i, table in enumerate(table_names, 1):
            print(f"   {i}. {table}")
        print()
        
        table_info = {}
        
        for table_name in table_names:
            print(f"üìã B·∫£ng: {table_name}")
            print("=" * 50)
            
            # L·∫•y c·∫•u tr√∫c b·∫£ng (schema)
            schema_query = f"PRAGMA table_info({table_name});"
            schema_df = pd.read_sql(schema_query, conn)
            
            print("üèóÔ∏è  C·∫•u tr√∫c b·∫£ng:")
            for _, row in schema_df.iterrows():
                nullable = "NULL" if row['notnull'] == 0 else "NOT NULL"
                default = f" DEFAULT {row['dflt_value']}" if row['dflt_value'] is not None else ""
                pk = " üîë PRIMARY KEY" if row['pk'] == 1 else ""
                print(f"   ‚Ä¢ {row['name']}: {row['type']} {nullable}{default}{pk}")
            
            # ƒê·∫øm s·ªë d√≤ng
            count_query = f"SELECT COUNT(*) as count FROM {table_name};"
            count_result = pd.read_sql(count_query, conn)
            row_count = count_result['count'].iloc[0]
            print(f"\nüìä S·ªë d√≤ng d·ªØ li·ªáu: {row_count:,}")
            
            # L·∫•y 3 d√≤ng m·∫´u
            if row_count > 0:
                sample_query = f"SELECT * FROM {table_name} LIMIT 3;"
                sample_df = pd.read_sql(sample_query, conn)
                print(f"\nüìù D·ªØ li·ªáu m·∫´u (3 d√≤ng ƒë·∫ßu):")
                print(sample_df.to_string(index=False, max_cols=10))
            
            # L∆∞u th√¥ng tin v√†o dict
            table_info[table_name] = {
                'schema': schema_df.to_dict('records'),
                'row_count': row_count,
                'sample_data': sample_df.to_dict('records') if row_count > 0 else []
            }
            
            print("\n" + "="*70 + "\n")
        
        return table_info
        
    except Exception as e:
        print(f"‚ùå L·ªói khi ph√¢n t√≠ch database: {e}")
        return {}
    finally:
        conn.close()

def analyze_relationships(db_path: str):
    """Ph√¢n t√≠ch m·ªëi quan h·ªá gi·ªØa c√°c b·∫£ng"""
    conn = sqlite3.connect(db_path)
    
    try:
        print("üîó Ph√¢n t√≠ch m·ªëi quan h·ªá gi·ªØa c√°c b·∫£ng:")
        print("=" * 50)
        
        # L·∫•y danh s√°ch t·∫•t c·∫£ b·∫£ng
        tables_query = "SELECT name FROM sqlite_master WHERE type='table';"
        tables_df = pd.read_sql(tables_query, conn)
        table_names = tables_df['name'].tolist()
        
        for table_name in table_names:
            # L·∫•y foreign key constraints
            fk_query = f"PRAGMA foreign_key_list({table_name});"
            fk_df = pd.read_sql(fk_query, conn)
            
            if not fk_df.empty:
                print(f"üìã B·∫£ng {table_name} c√≥ foreign keys:")
                for _, fk in fk_df.iterrows():
                    print(f"   ‚Ä¢ {fk['from']} ‚Üí {fk['table']}.{fk['to']}")
            
        # Ph√¢n t√≠ch c√°c c·ªôt c√≥ th·ªÉ li√™n quan d·ª±a tr√™n t√™n
        print(f"\nüîç Ph√¢n t√≠ch c√°c c·ªôt c√≥ th·ªÉ li√™n quan (d·ª±a tr√™n t√™n):")
        all_columns = {}
        
        for table_name in table_names:
            schema_query = f"PRAGMA table_info({table_name});"
            schema_df = pd.read_sql(schema_query, conn)
            all_columns[table_name] = schema_df['name'].tolist()
        
        # T√¨m c√°c c·ªôt c√≥ t√™n t∆∞∆°ng t·ª±
        potential_relationships = []
        for table1, cols1 in all_columns.items():
            for table2, cols2 in all_columns.items():
                if table1 != table2:
                    for col1 in cols1:
                        for col2 in cols2:
                            if col1 == col2 or (col1.endswith('_id') and col1[:-3] in table2):
                                potential_relationships.append(f"{table1}.{col1} ‚Üî {table2}.{col2}")
        
        if potential_relationships:
            print("   C√°c m·ªëi quan h·ªá c√≥ th·ªÉ:")
            for rel in set(potential_relationships):
                print(f"   ‚Ä¢ {rel}")
        
    except Exception as e:
        print(f"‚ùå L·ªói khi ph√¢n t√≠ch m·ªëi quan h·ªá: {e}")
    finally:
        conn.close()

def generate_summary_report(table_info: Dict[str, Any]):
    """T·∫°o b√°o c√°o t·ªïng k·∫øt"""
    print("üìä B√ÅO C√ÅO T·ªîNG K·∫æT")
    print("=" * 50)
    
    total_tables = len(table_info)
    total_rows = sum(info['row_count'] for info in table_info.values())
    
    print(f"üìà T·ªïng s·ªë b·∫£ng: {total_tables}")
    print(f"üìà T·ªïng s·ªë d√≤ng d·ªØ li·ªáu: {total_rows:,}")
    print()
    
    print("üìã Chi ti·∫øt t·ª´ng b·∫£ng:")
    for table_name, info in table_info.items():
        column_count = len(info['schema'])
        print(f"   ‚Ä¢ {table_name}: {column_count} c·ªôt, {info['row_count']:,} d√≤ng")
    
    print()
    print("üéØ M·ª•c ƒë√≠ch s·ª≠ d·ª•ng c√≥ th·ªÉ:")
    print("   ‚Ä¢ H·ªá th·ªëng ƒë·∫∑t v√© du l·ªãch")
    print("   ‚Ä¢ Qu·∫£n l√Ω chuy·∫øn bay, kh√°ch s·∫°n, xe thu√™")
    print("   ‚Ä¢ Theo d√µi booking v√† thanh to√°n")

def main():
    """H√†m ch√≠nh"""
    print("üîç PH√ÇN T√çCH C·∫§U TR√öC DATABASE TRAVEL2.SQLITE")
    print("=" * 60)
    
    # URL v√† file local
    db_url = "https://storage.googleapis.com/benchmarks-artifacts/travel-db/travel2.sqlite"
    local_db_file = "travel2_analysis.sqlite"
    
    try:
        # T·∫£i database
        db_path = download_sqlite_db(db_url, local_db_file)
        
        print()
        # Ph√¢n t√≠ch c·∫•u tr√∫c b·∫£ng
        table_info = get_table_info(db_path)
        
        # Ph√¢n t√≠ch m·ªëi quan h·ªá
        analyze_relationships(db_path)
        
        print()
        # T·∫°o b√°o c√°o t·ªïng k·∫øt
        generate_summary_report(table_info)
        
        print(f"\n‚úÖ Ho√†n th√†nh ph√¢n t√≠ch! File database ƒë∆∞·ª£c l∆∞u t·∫°i: {local_db_file}")
        
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
    finally:
        # Cleanup: x√≥a file t·∫°m n·∫øu mu·ªën
        # if os.path.exists(local_db_file):
        #     os.remove(local_db_file)
        #     print(f"üóëÔ∏è  ƒê√£ x√≥a file t·∫°m {local_db_file}")
        pass

if __name__ == "__main__":
    main()