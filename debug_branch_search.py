#!/usr/bin/env python3
"""Test why branch documents are not being retrieved properly."""

import sys
from pathlib import Path
import os
from dotenv import load_dotenv

load_dotenv()
PROJECT_ROOT = Path.cwd()
sys.path.insert(0, str(PROJECT_ROOT))

from src.database.qdrant_store import QdrantStore

store = QdrantStore(
    collection_name='tianlong_marketing',
    embedding_model='text-embedding-004',
    output_dimensionality_query=768
)

# Test v·ªõi c√°c query variants nh∆∞ trong RAG workflow
test_queries = [
    # Query g·ªëc t·ª´ user
    'b√™n em c√≥ bao nhi√™u chi nh√°nh',
    
    # Query ƒë√£ rewrite (theo log)
    'Tian Long c√≥ bao nhi√™u chi nh√°nh?',
    
    # Variants kh√°c
    'Tian Long c√≥ bao nhi√™u chi nh√°nh v√† ·ªü ƒë√¢u',
    'th√¥ng tin chi nh√°nh Tian Long',
    'ƒë·ªãa ch·ªâ c∆° s·ªü Tian Long',
    'chi nh√°nh nh√† h√†ng Tian Long'
]

print('=== TEST SEARCH RETRIEVAL FOR BRANCH QUESTIONS ===')
print('Ki·ªÉm tra t·∫°i sao documents v·ªÅ chi nh√°nh kh√¥ng ƒë∆∞·ª£c retrieve trong RAG workflow\n')

for query in test_queries:
    print(f'üîç QUERY: "{query}"')
    print('='*70)
    
    # Search to√†n b·ªô collection (no namespace filter)
    results = store.search(namespace=None, query=query, limit=10)
    print(f'üìä Total results: {len(results)}')
    
    # Ph√¢n t√≠ch k·∫øt qu·∫£
    branch_docs = []
    other_docs = []
    
    for i, (key, value, score) in enumerate(results):
        if isinstance(value, dict):
            content = value.get('content', '')
            category = value.get('category', '')
            
            # Ki·ªÉm tra xem c√≥ ph·∫£i document v·ªÅ chi nh√°nh kh√¥ng
            is_branch_doc = any(keyword in content.lower() or keyword in category.lower() for keyword in [
                'chi nh√°nh', 'c∆° s·ªü', '8 chi nh√°nh', 'h√† n·ªôi', 'tp.hcm', 'h·∫£i ph√≤ng', 'hu·∫ø',
                'vincom', 'times city', 'th·∫£o ƒëi·ªÅn', 'branch_info', 'locations'
            ])
            
            if is_branch_doc:
                branch_docs.append((i+1, key, score, category))
            else:
                other_docs.append((i+1, key, score, category))
    
    # Hi·ªÉn th·ªã ph√¢n t√≠ch
    print(f'üè¢ Branch documents found: {len(branch_docs)}')
    for rank, key, score, category in branch_docs[:3]:
        print(f'  #{rank} - {key} (score: {score:.4f}) - {category}')
    
    print(f'üìÑ Other documents: {len(other_docs)}')  
    for rank, key, score, category in other_docs[:3]:
        print(f'  #{rank} - {key} (score: {score:.4f}) - {category}')
    
    # Ki·ªÉm tra top 3 c√≥ ch·ª©a branch info kh√¥ng
    top_3_has_branch = len([doc for doc in branch_docs if doc[0] <= 3]) > 0
    print(f'‚ùó Top 3 contains branch docs: {"‚úÖ YES" if top_3_has_branch else "‚ùå NO"}')
    
    print('\n' + '='*80 + '\n')
